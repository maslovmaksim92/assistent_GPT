import os
from assistent_GPT.code_writer import generate_code_from_task
from assistent_GPT.deployer import deploy

TASKS_FILE = "tasks_wiki.txt"
OUTPUT_FILE = "generated_patch.py"
LOG_FILE = "logs/self_update.log"


def read_task():
    if not os.path.exists(TASKS_FILE):
        print(f"[‚ö†Ô∏è] –§–∞–π–ª –∑–∞–¥–∞—á {TASKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    with open(TASKS_FILE, "r", encoding="utf-8") as f:
        return f.read().strip()


def write_code_to_file(code: str):
    try:
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            f.write(code)
        print(f"[üì¶] –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {OUTPUT_FILE}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}")


def append_log(entry: str):
    try:
        os.makedirs("logs", exist_ok=True)
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(entry + "\n")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")


if __name__ == "__main__":
    print("[ü§ñ] –°–∞–º–æ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–∏–π —Ü–∏–∫–ª –Ω–∞—á–∞—Ç")

    while True:
        task = read_task()
        if not task:
            print("[üü°] –ù–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ù–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ...")
            continue

        print("[üß†] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ GPT...")
        try:
            result = generate_code_from_task(task)
            write_code_to_file(result)
            deploy_log = deploy()
            append_log(deploy_log if deploy_log else "[‚ö†Ô∏è] –ü—É—Å—Ç–æ–π –ª–æ–≥ –¥–µ–ø–ª–æ—è")
        except Exception as e:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            append_log(f"[‚ùå] –û—à–∏–±–∫–∞: {e}")

        print("[üîÅ] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É...\n")
