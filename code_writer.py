import os
import re
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

PROJECT_PATH = "./"


def generate_code_from_task(task: str) -> str:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ wiki_task_updater.py –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á–∏
    """
    print("[üß†] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI (–∏–∑ wiki_task_updater)...")
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ Python-–∫–æ–¥ –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."},
            {"role": "user", "content": task}
        ]
    )
    code = response.choices[0].message.content
    print("[‚úÖ] GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–¥ –ø–æ –∑–∞–¥–∞—á–µ")
    return code


def write_code(idea: str, full_context: str = None) -> bool:
    try:
        print("[üß†] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI...")

        messages = [
            {"role": "system", "content": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–ª—É—á—à–∏—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —á—ë—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: ```python FILE: filename.py\n–∫–æ–¥```"},
            {"role": "user", "content": f"–í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {idea}"}
        ]

        if full_context:
            messages.append({"role": "user", "content": f"–í–æ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞:\n{full_context}\n\n–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω–∏ —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ```python FILE: filename.py\n–Ω–æ–≤—ã–π –∫–æ–¥```"})

        response = client.chat.completions.create(
            model="gpt-4",
            messages=messages,
            temperature=0.4
        )

        generated = response.choices[0].message.content.strip()
        with open("./code_suggestion.md", "w", encoding="utf-8") as f:
            f.write(generated)

        print("[üîç] –†–∞–∑–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        apply_code_updates(generated)

        return True

    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        return False


def apply_code_updates(md_content: str):
    matches = re.findall(r"```python FILE: (.*?)\\n(.*?)```", md_content, re.DOTALL)

    if not matches:
        print("[‚ö†Ô∏è] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–ª–æ–≤.")
        return

    for filename, code in matches:
        filepath = os.path.join(PROJECT_PATH, filename.strip())
        try:
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(code.strip())
            print(f"[‚úÖ] –û–±–Ω–æ–≤–ª—ë–Ω —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            print(f"[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å {filename}: {e}")
